"""schema updated-4

Revision ID: 75555b631241
Revises: 
Create Date: 2024-08-06 09:09:29.047185

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector


# revision identifiers, used by Alembic.
revision: str = '75555b631241'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('birthday', sa.Date(), nullable=True),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('bio', sa.String(), nullable=True),
    sa.Column('profile_picture', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('school_num_handles', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('password_hashed', sa.String(), nullable=True),
    sa.Column('providers', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index('idx_user_email', 'users', ['email'], unique=False)
    op.create_index('idx_user_username', 'users', ['username'], unique=False)
    op.create_table('contacts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('follower_id', sa.String(), nullable=True),
    sa.Column('followed_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('follower_id', 'followed_id', name='unique_follow')
    )
    op.create_index('idx_followed_id', 'contacts', ['followed_id'], unique=False)
    op.create_index('idx_follower_id', 'contacts', ['follower_id'], unique=False)
    op.create_table('feedback',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('timestamp', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('investor_interest',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('reason', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_investor_interest_id'), 'investor_interest', ['id'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('type_notification', sa.String(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('read', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('prompts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('text', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_prompt_user_id', 'prompts', ['user_id'], unique=False)
    op.create_index(op.f('ix_prompts_user_id'), 'prompts', ['user_id'], unique=False)
    op.create_table('decks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('prompt_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_deck_prompt_id', 'decks', ['prompt_id'], unique=False)
    op.create_index('idx_deck_user_id', 'decks', ['user_id'], unique=False)
    op.create_table('questions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('prompt_id', sa.Integer(), nullable=True),
    sa.Column('question_text', sa.String(), nullable=True),
    sa.Column('difficulty', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_question_prompt_id', 'questions', ['prompt_id'], unique=False)
    op.create_index(op.f('ix_questions_prompt_id'), 'questions', ['prompt_id'], unique=False)
    op.create_table('options',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('option_text', sa.String(), nullable=False),
    sa.Column('is_correct_answer', sa.Boolean(), nullable=True),
    sa.Column('is_selected', sa.Boolean(), nullable=True),
    sa.Column('is_typed', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_option_question_id', 'options', ['question_id'], unique=False)
    op.create_index(op.f('ix_options_question_id'), 'options', ['question_id'], unique=False)
    op.create_table('user_assignments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('deck_id', sa.Integer(), nullable=False),
    sa.Column('prompt_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('last_reviewed_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('next_review_date', sa.Date(), server_default=sa.text('CURRENT_DATE'), nullable=True),
    sa.Column('interval', sa.Integer(), nullable=True),
    sa.Column('ease_factor', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['deck_id'], ['decks.id'], ),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_assignment_deck_id', 'user_assignments', ['deck_id'], unique=False)
    op.create_index('idx_user_assignment_next_review_date', 'user_assignments', ['next_review_date'], unique=False)
    op.create_index('idx_user_assignment_prompt_id', 'user_assignments', ['prompt_id'], unique=False)
    op.create_index('idx_user_assignment_question_id', 'user_assignments', ['question_id'], unique=False)
    op.create_index('idx_user_assignment_user_id', 'user_assignments', ['user_id'], unique=False)
    op.create_table('user_responses',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_assignment_id', sa.Integer(), nullable=False),
    sa.Column('session_timestamp', sa.DateTime(), nullable=False),
    sa.Column('response', sa.String(), nullable=False),
    sa.Column('correct', sa.Integer(), nullable=False),
    sa.Column('selected_option_id', sa.Integer(), nullable=True),
    sa.Column('difficulty', sa.Integer(), nullable=False),
    sa.Column('last_grade', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['selected_option_id'], ['options.id'], ),
    sa.ForeignKeyConstraint(['user_assignment_id'], ['user_assignments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_response_session_timestamp', 'user_responses', ['session_timestamp'], unique=False)
    op.create_index('idx_user_response_user_assignment_id', 'user_responses', ['user_assignment_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_user_response_user_assignment_id', table_name='user_responses')
    op.drop_index('idx_user_response_session_timestamp', table_name='user_responses')
    op.drop_table('user_responses')
    op.drop_index('idx_user_assignment_user_id', table_name='user_assignments')
    op.drop_index('idx_user_assignment_question_id', table_name='user_assignments')
    op.drop_index('idx_user_assignment_prompt_id', table_name='user_assignments')
    op.drop_index('idx_user_assignment_next_review_date', table_name='user_assignments')
    op.drop_index('idx_user_assignment_deck_id', table_name='user_assignments')
    op.drop_table('user_assignments')
    op.drop_index(op.f('ix_options_question_id'), table_name='options')
    op.drop_index('idx_option_question_id', table_name='options')
    op.drop_table('options')
    op.drop_index(op.f('ix_questions_prompt_id'), table_name='questions')
    op.drop_index('idx_question_prompt_id', table_name='questions')
    op.drop_table('questions')
    op.drop_index('idx_deck_user_id', table_name='decks')
    op.drop_index('idx_deck_prompt_id', table_name='decks')
    op.drop_table('decks')
    op.drop_index(op.f('ix_prompts_user_id'), table_name='prompts')
    op.drop_index('idx_prompt_user_id', table_name='prompts')
    op.drop_table('prompts')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_investor_interest_id'), table_name='investor_interest')
    op.drop_table('investor_interest')
    op.drop_table('feedback')
    op.drop_index('idx_follower_id', table_name='contacts')
    op.drop_index('idx_followed_id', table_name='contacts')
    op.drop_table('contacts')
    op.drop_index('idx_user_username', table_name='users')
    op.drop_index('idx_user_email', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
